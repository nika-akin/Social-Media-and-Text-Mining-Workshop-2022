{"title":"Use case Twitter text mining","markdown":{"headingText":"Use case Twitter text mining","containsRefs":false,"markdown":"\n\n\n### Required packages {.unnumbered}\n\n```{r, message = FALSE, warning = FALSE, results = 'hide'}\npkgs <- c(\"sf\", \"mapview\", \"spdep\", \"spatialreg\", \"tmap\", \"viridisLite\") # note: load spdep first, then spatialreg\nlapply(pkgs, require, character.only = TRUE)\n```\n\n\nFor demonstration purposes we retrieve an archived Twitter (sub-)sample, containing English **depression** specific tweets. (The sample contains *N*= 20,000 tweets.)\nWe retrieve a subsample from the plattform *Kaggle*.\n\n**a.)** This can be directly downloaded: **[Kaggle Data Dump, Depression\"](https://www.kaggle.com/datasets/infamouscoder/mental-health-social-media?select=Mental-Health-Twitter.csv)**\n\n**b.)** Or by issuing a `GET` request via its `API` (see below).\n\nFor obtaining the data via the `Kaggle API` we *install* and *load* all dependencies to use `kaggler`.\n\n```{r, message=FALSE}\n#install.packages(c(\"devtools\"))\ndevtools::install_github(\"ldurazo/kaggler\")\n```\n\n```{r, message=FALSE}\nlibrary(readr)\nlibrary(kaggler)\n```\nA `kaggle.json` file needs to be made for **authentication** on Kaggle.\nThe `kaggle.json` file should be positioned within the working directory. The json contains: *username* and the `API token`.\n\nTo create your `API token` go to your Kaggle Profil: (Your profile > Account > Settings > API > Create new token)\n\n```{r eval=FALSE}\nkgl_auth(creds_file = 'kaggle.json')\n```\n\n```{r eval=FALSE}\nresponse <- kgl_datasets_download_all(owner_dataset = \"infamouscoder/mental-health-social-media?select=Mental-Health-Twitter\")\n```\n\n\n```{r eval=FALSE}\nlibrary(httr)\ndataset <- httr::GET(\"https://www.kaggle.com/datasets/infamouscoder/mental-health-social-media?select=Mental-Health-Twitter.csv\")\n\ntemp <- tempfile()\ndownload.file(dataset$url,temp)\ndata <- read.csv(unz(temp, \"Mental-Health-Twitter.csv\"))\nunlink(temp)\n```\n\n```{r eval=FALSE}\nmental <- data\n```\n\n```{r message=FALSE, echo=FALSE}\nsetwd(\"C:/Users/batzdova/Desktop\")\n```\n\n```{r}\n\nlibrary(here)\nmental <- read_csv(\"Mental-Health-Twitter.csv\")\n```\n\nLoad further dependencies\n#### `R`-packages\n```{r, eval=TRUE, message=FALSE}\nlibrary(academictwitteR)    # collecting Twitter data\nlibrary(dplyr)              # Data Wrangling, pre-processing\nlibrary(quanteda)           # text-based descriptive\nlibrary(quanteda.textstats)\nlibrary(quanteda.textplots)\nlibrary(tidytext)           # Text Mining 'tidy format'\nlibrary(textclean)          # Pre-Processing + harmonizing\nlibrary(lubridate)          # Wrangling with time series data\nlibrary(ggplot2)\n\ntheme_set(theme_light())\n```\n\n\n#### Variable Overview\n\n```{r}\nglimpse(mental)\n```\n**Parse Date Variable** `post_created`\n\n```{r}\n# Remove the timezone offset from the date string\nmental$date <- gsub(\" \\\\+\\\\d{4}\", \"\", mental$post_created)\n```\n\n\n\n```{r}\n#install.packages(\"anytime\")\nlibrary(anytime)\n# Convert the date string to a date variable\nmental$date_any <- anytime(mental$date)\n\n# Format the date variable as \"YYYY-MM-DD H:M\"\nmental$formatted_date <- format(mental$date_any , \"%Y-%m-%d %H:%M\")\n```\n\n`Formatted_date` is a `character` class.\nWhen we would use `as.Date()` we would lose the `timestamp` information.\nWhen we have a character with both date and time we have to use `POSIXct` class (as seen with the `date_any` variable).\n```{r}\nmental$formatted_date_time <- as.POSIXlt(mental$formatted_date)\n```\n\n\n**Distribution Friends**\n\n```{r }\nmental$logfriends <-log(mental$friends+1)\n\nhist(mental$logfriends, breaks = 50)\n```\n**Distribution Followers**\n\n```{r Log transformed followers}\nmental$logfollow=log(mental$followers+1)\n```\n\n```{r}\nhist(mental$logfollow, breaks = 50)\n\nggplot(mental, aes(x = logfriends, y = logfollow)) + \n  geom_point(alpha=.5)\n```\n\n\n**Tweets und Retweets per day**\n```{r}\ntwt_retwt_summary <- mental %>%\n  group_by(formatted_date) %>%\n  summarize(tweets = n(),\n            avg_retweets = exp(mean(log(retweets + 1))) - 1)\n\ntwt_retwt_summary %>%\n  ggplot(aes(formatted_date, tweets)) +\n  geom_line(color = \"darkblue\", size = 0.5) +\n  expand_limits(y = 0) +\n  labs(x = \"Time\",\n       y = \"Number of depression tweets per day\")\n\ntwt_retwt_summary %>%\n  ggplot(aes(formatted_date, avg_retweets)) +\n  geom_line(color = \"darkblue\", size = 0.5) +\n  expand_limits(y = 0) +\n  labs(x = \"Time\",\n       y = \"Average (geometric mean) retweets each day\")\n```\n**User Activity**\n```{r}\nmental %>%\n  count(user_id, sort = TRUE) %>%\n  head(12) %>%\n  mutate(username = reorder(user_id, n)) %>%\n  ggplot(aes(username, n)) +\n  geom_col() +\n  coord_flip()\n\n#Retweet activity per user\nmental %>%\n  arrange(desc(retweets)) %>%\n  select(user_id, post_text, retweets)\n#Tweets und Retweets per User\nmental %>%\n  group_by(user_id) %>%\n  summarize(tweets = n(),\n            retweetnr = sum(retweets)) %>%\n  arrange(desc(tweets)) %>%\n  arrange(desc(retweetnr))\n\n#Proportion Likes and Retweets per User\nmental %>%\n  select(user_id, post_text, retweets, favourites) %>%\n  mutate(ratio = (favourites + 1) / (retweets + 1)) %>% # to avoid zero\n  arrange(desc(ratio))\n\n```\n\n#### 8. Basics Text Mining in a Nutshell\nA.**Document** = collection of strings and their metadata\n\nB.**Corpus** = collection of *documents**. \n\nC.**Tokens** = smallest unit of meaning (mostly words)\n\nD.**Vocabulary** = collection of unique words of a *Corpus*.\n\nE.**D**ocument-**F**eature-**M**atrix or **D**ocument-**T**erm-**M**atrix = \n\nthis is a matrix where the rows indicate the documents, the columns indicate the expressions and the cells indicate the frequency of the expressions in each document, i.e.: Matrix with *n* = number of Document rows and *m* = size of Vocabulary columns, based on **bag-of-words** assumption, which ignores word order and syntax. \n\n\n\n##### 8.1. Pre-processing\nA. **Tokenisation**\n\nB. **Remove **Stopwords\n\nC. **String** operations (punctuation, normalise URL).\n\nThe order of the application steps is crucial and should be guided by the research question.\n\n```{r Pre-processing Punctuation}\n# Clean @-Symbol\nmental$post_text<- gsub(\"@\\\\w+\", \"\", mental$post_text)\n\n# Clean Interpunction\nmental$post_text<- gsub(\"[[:punct:]]\", \"\", mental$post_text)\n\n# Clean Numbers\nmental$post_text <- gsub(\"[[:digit:]]\", \"\", mental$post_text)\n\n# Clean pictures\nmental$post_text<- gsub(\"pictwitter\\\\w+ *\", \"\", mental$post_text)\n```\n\n```{r Pre-processing html}\n#Bereinigen von HTML-Notation\nremove_html <- \"&amp;|&lt;|&gt;\" #&lt und &gt stehen für < und > und &amp für &\n\nmental_en <- mental %>% \n  select(post_id, post_text, user_id) %>% \n  mutate(text = stringr::str_remove_all(post_text, remove_html))\n```\n\nWith [`textclean`](https://github.com/trinker/textclean) further harmonisation can be done, e.g. replacing emojis with word equivalents.\n\n```{r, warning=FALSE}\nmental_en$text <- replace_emoji(mental_en$text)\n```\nOder Normalisieren von Wortverlängerungen (Elongation, z.B.\"Whyyyy\")\n```{r, warning=FALSE}\nmental_en$text <- replace_word_elongation(mental_en$text)\n```\n\nFrom the data frame, you can create a *Corpus* object, i.e. a collection of *documents* (tweets) and their *metadata*.\n\n```{r}\n#select unique tweet_ids\n\nunique <- mental_en %>% group_by(post_id) %>% unique()\n```\n\n\n\n```{r Corpus Objekt, results='hide'}\ntweets_en_corpus <- corpus(unique,\n                           docid_field = \"post_id\",\n                           text_field = \"post_text\")\n\n```\nIn `quanteda` kann man Text in die kleinsten Bedeutungssegmente (**tokens**) aufteilen durch das Entfernen von Trennzeichen (vgl. dazu in `tidytext` `unnest_tokens(word, text)`. Zudem entfernen wir bestimmte Zeichentypen sowie sogenannte **Stopwords** (d.h., grammatikalische Wörter, die je nach Anwendung wenig semantische Bedeutung tragen). Vgl. (`stopwords()`)\n\n```{r Tokenisation, results=FALSE}\ntweets_en_tokens <- tokens(tweets_en_corpus,\n                           remove_punct = TRUE,\n                           remove_numbers = TRUE,\n                           remove_symbols = TRUE,\n                           remove_url = TRUE) %>% \n  tokens_tolower() %>% \n  tokens_remove(stopwords(\"english\"))\n```\n\n```{r KWIC, results='hide'}\n\nkw_depression <- kwic(tweets_en_tokens, pattern =  \"depress*\", window = 3)\nhead(kw_depression)\n```\n\n\n\n#### 8.2. Tidy Workflow--Exploration Tweets, Retweets und Hashtags\n```{r Tokenisation und Pre-processing}\n#Tokenisation der Tweets (1-gram) und Pre-processing mit tidytext\n\ntweet_words <- mental %>%\n  select(user_id, \n         post_text, \n         retweets, \n         favourites,\n         formatted_date, \n         post_id) %>%\n  unnest_tokens(word, post_text) %>%\n  anti_join(stop_words, by = \"word\") %>%\n  filter(!word %in% c(\"amp\", \"de\", \"twitter\", \"youre\", \"en\", \"die\", \"rt\", \"im\", \"dont\", \"ive\", \"yong\"),\n         stringr::str_detect(word, \"[a-z]\"))\n\n\ntweet_words %>%\n  count(word, sort = TRUE) %>%\n  head(16) %>%\n  mutate(word = reorder(word, n)) %>%\n  ggplot2::ggplot(aes(word, n)) +\n  geom_col() +\n  coord_flip() +\n  labs(title = \"Most common words in Tweets on Depression\",\n       y = \"Frequency of words\")\n\n```\n\n```{r Favorites und Retweets, warning=FALSE}\n#Verteilung Favorites\nmental %>%\n  ggplot2::ggplot(aes(favourites + 1)) +\n  geom_histogram() +\n  scale_x_log10()\n\n#Durchschnittliche Retweets und Durschnittliche Favorites\nword_summary <- tweet_words  %>%\n  group_by(word) %>%\n  summarize(n = n(),\n            avg_retweets = exp(mean(log(retweets + 1))) - 1,\n            avg_favorites = exp(mean(log(favourites + 1))) - 1) %>%\n  filter(n >= 30) %>%\n  arrange(desc(avg_retweets))\n\n```\n\n\n```{r tf-idf}\n#Tf-idf: die Kennzahl tf-idf gibt an, wie wichtig ein Wort für ein Dokument in einer Sammlung (oder einem Korpus) von Dokumenten ist\n#Häufigkeit eines Begriffs, bereinigt darum, wie selten er verwendet wird\ntop_word <- tweet_words %>%\n  count(word, formatted_date) %>%\n  bind_tf_idf(word, formatted_date, n) %>%\n  arrange(desc(tf_idf)) %>%\n  distinct(formatted_date, .keep_all = TRUE) %>%\n  arrange(formatted_date)\n\ntf_idf <-word_summary %>%\n  inner_join(top_word, by = c(\"word\")) %>%\n  arrange(desc(avg_retweets)) \n\n#Tf-idf der Wörter pro Stunde\ntf_idf %>% \n  ggplot2::ggplot(aes(tf_idf, forcats::fct_reorder(word, tf_idf), fill = formatted_date)) +\n  geom_col(show.legend = FALSE)\n```\n\n```{r hashtags, warning=FALSE}\n#Hashtag Exploration\ntweet_words <- mental %>%\n  mutate(hashtags = stringr::str_count(post_text, \"#[a-zA-Z]\"), sort = TRUE) %>%\n  select(user_id, post_text, retweets, favourites, formatted_date , post_id,\n        hashtags) %>%\n  unnest_tokens(word, post_text) %>%\n  anti_join(stop_words, by = \"word\") %>%\n  filter(!word %in% c(\"de\", \"|\"),\n         stringr::str_detect(word, \"[a-z]\"))\n\n\nmental %>%\n  mutate(hashtags = stringr::str_count(post_text, \"#[a-zA-Z]\"), sort = TRUE) %>%\n  filter(hashtags < 6) %>%\n  group_by(user_id) %>%\n  summarize(tweets = n(),\n            avg_retweets = exp(mean(log(retweets + 1))) - 1) %>%\n  filter(tweets >= 30) %>%\n  arrange(desc(avg_retweets))\n\n\ntweet_word_summary <- tweet_words %>%\n  filter(hashtags < 6) %>%\n  group_by(word) %>%\n  summarize(n = n(),\n            avg_retweets = exp(mean(log(retweets+ 1))) - 1,\n            avg_favorites = exp(mean(log(favourites + 1))) - 1)\n\n\n\ntweet_word_summary <-tweet_word_summary %>%\n  filter(n >= 100,\n         !stringr::str_detect(word, \"https\")) %>%\n   filter(!word %in% c(\"amp\", \"de\", \"twitter\", \"youre\", \"en\", \"die\", \"rt\", \"im\", \"dont\", \"ive\", \"yong\"),\n         stringr::str_detect(word, \"[a-z]\")) %>% \n  arrange(desc(avg_retweets)) %>% \n  head()\n\ntweet_word_summary %>%\n  filter(n >= 100,\n         !stringr::str_detect(word, \"https\")) %>%\n  ggplot2::ggplot(aes(n, avg_retweets)) +\n  geom_point() +\n  geom_text(aes(label = word), check_overlap = TRUE) +\n  scale_x_log10() +\n  scale_y_log10()\n\ntweet_word_summary %>%\n  filter(n >= 100,\n         !stringr::str_detect(word, \"https\")) %>%\n  arrange(desc(avg_retweets)) %>%\n  head(20) %>%\n  mutate(word = reorder(word, avg_retweets)) %>%\n  ggplot2::ggplot(aes(word, avg_retweets)) +\n  geom_col() +\n  coord_flip() +\n  labs(title = \"Which words get the most retweets in depression?\",\n       subtitle = \"Only words appearing in at least 100 tweets\",\n       y = \"Geometric mean of the Number of retweets\")\n```\n\n\n#### 9. Daten speichern\n```{r, eval=FALSE}\nwrite_csv(tweets, file = \"./data/tweets.csv\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"atom-one","output-file":"twitter_app.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","bibliography":["references.bib"],"number-depth":3,"theme":"cosmo","code-block-bg":"#f0f0f0","code-block-border-left":"#045a8d","code-summary":"Code","code-copy":true,"knitr":{"opts_chunk":{"out.width":"100%","R.options":{"width":68}}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}